# Moments

Initial setup
-------------
Add landing page
Add moments page that list all events and their images

Each moment has:
*Event
*Image

#Layout and basic styling
-------------------------
Create header and footer partials to dry the code (Add html  boiler plate)
Add in bootstrap

Creating new events
--------------------
set up new event post route
Add on body parser
setup route to show form
Add basic unstyled form

#Style the campgrounds page
----------------------------
*Add a better header/title using jumbotron in bootstrap
*Make events display in a grid

#Style the Navbar and Form
----------------------------
* Add a navbar to all templates using the header.ejs
* Style the new campground form

* Center the form in the /moments/new page
* Stack the fields to lay on top of each other, rather than the horizontal way it is

***NOTE - Avoid doing inline styling

# Pushing to git cheat sheet:
http://lepidllama.net/blog/how-to-push-an-existing-cloud9-project-to-github/

-----------------------------------------------------------------------------------------------Committed 1

#Databases
SQL vs NoSQL
 -Choosing NoSQL to allow for flexibility by avoiding strict SQL schema bound 9Very flexible and dynamic)
 - MongoDB because it sits well with the MEAN stack (MongoDB, Express, Angular, Node)
 - Explore other database from the used ones
 - The fourth most popular Database
 
See Setting up MongoDB; 
https://community.c9.io/t/setting-up-mongodb/1717

cd .. workspace/

sudo apt-get install -y mongodb-org
$ mkdir data
$ echo 'mongod --bind_ip=$IP --dbpath=data --nojournal --rest "$@"' > mongod
$ chmod a+x mongod
You can start mongodb by running the mongod script on your project root:
$ ./mongod

* mongod 
* mongo 
* help 
* show dbs
* use 
* insert 
* find 
* update
* remove

From workspace terminal >mongo
> use demo
switched to db demo
> show dbs
admin  (empty)
local  0.078GB
> db.dogs.insert({name: "Rusty", breed: "Mutt"})
WriteResult({ "nInserted" : 1 })
> show collections
dogs
system.indexes
> db.dogs.find()
{ "_id" : ObjectId("5bf42aafafcbf403ff27f02f"), "name" : "Rusty", "breed" : "Mutt" }
> db.dogs.insert({name: "Lucy", breed: "Mutt"})
WriteResult({ "nInserted" : 1 })
> db.dogs.find()
{ "_id" : ObjectId("5bf42aafafcbf403ff27f02f"), "name" : "Rusty", "breed" : "Mutt" }
{ "_id" : ObjectId("5bf42b30afcbf403ff27f030"), "name" : "Lucy", "breed" : "Mutt" }
> db.dogs.find({name: "Rusty"))
> db.dogs.insert({name: "Lucy", breed: "Mutt"})
> db.dogs.update({name: "Lucy"}, {breed: "Mutana"})
> db.dogs.find()
{ "_id" : ObjectId("5bf42b30afcbf403ff27f030"), "breed" : "Mutana" } // note that the name has been overridden as we did not make use of #set
> db.dogs.update({name: "Rusty"}, {$set: {name: "Tatar", isCute: true}}) // updating and preserving
> db.dogs.remove({breed: "Poodle"}) // to remove a particular breed
> db.dogs.remove({breed: "Poodle"}).limit(1) // To limit the number of matching objects that could be deleted

# To check your db is connected and working for dazzfun
> mongo
>show dbs >use<db> >show collections >db.dazzfuns.find()

CRUD - Create, Remove, Update, Delete

mongoosejs.com
mongoose is an ODM (object data mapper)
It allows us to write js object which would be mapped to our db
it's basically a js layer on top of mongodbb
Hint: Mongoose makes it easy to interact with mongodb database Just as jquery makes it easy to interact with the dom As we dont have to use jquery or mongoose.

# Unclean shutdown detected when not shut down properly with Ctrl C
cd data ; rm -rf mongod.lock ; cd .. ; ./mongod
> ./mongod --repair ; ./mongod  // Easier and better solution

# Data persistence todo
----------------------------
Changing all ejs naming convention from moments to dazzfuns for consistency
#Install and configure mongoose
#Setup dazzfun model
#Use dazzfun model inside of my routes

-------------------------------------------------------------------------------------------Committed

#Review the RESTful routes
# Add description to dazzfun model
# show db.collection.drop()
# Add a show route/template

# Used  four of the RESTful routes:
INDEX   /dazzfuns          Get
NEW     /dazzfuns/new      Get
CREATE  /dazzfuns          Post
SHOW    /dazzfuns/:id      Get


-------------------------------------------------------------------------------------------Committed
Edit    /dazzfun/:id/edit  Get
Update  /dazzfun/:id       PUT
Destroy /dazzfun/:id       Delete

# Refactor Mongoose Code
* Create models directory
* Use module.exports
* Require everything completely

#Add Seeds File
*Add a seeds.js file
* Run the seeds file every time the server starts

# Add comment model
* Make the error go away
* Display comments on campground show page

-----------------------------------------------------------------------------------------------Committed v3

#Comment New/Create
* Using Nested routes
* Add the comment new and create routes
* Add the new comment form

* NEW  dazzfuns/:id/comments/new  GET
* CREATE dazzfuns/:id/comments   POST

* Created two new directories under "VIEW" to have dazzfuns and comments template seperate
* Added "Add New Comment" button in the show page

-----------------------------------------------------------------------------------------------Committed v4

Add side bar
Style the show page:
    Removing padding
    Making thumbnail 100% width
Add a custom main.css stylesheet in public/stylesheets directory
Linked to it in app.js and header.ejs files
 Using: app.use(express.static(__dirname + "/public")); // connecting script to the public directory

-----------------------------------------------------------------------------------------------Committed v5
Show/hide 
Add a custom main.css stylesheet in public/stylesheets directory
-----------------------------------------------------------------------------------------------Committed v6

Refactoring the app.js by creating routes directory and moving all the routes in there
This is done by the use of Express Router and setting it to a variable (router, in this case)
And then replacing all the app reference in our
"({mergeParams: true})" is added to express router to associate comment with campground id, fixed the null error

-----------------------------------------------------------------------------------------------Committed v7
* Associate users and comments
* Save author's name to a comment automatically

added users and Id to models/comments.js to have comment associated with user by default (Used to manually 
type in user before creating comment before)
Commented out reference to User and Id in seeds.js as the schema has no knowledge of this yet.
Removing the author feed from comment page as this isn't required anymore (from views/new.ejs)
Adding ".username" in my views/dazzfuns/show.ejs to show only the logged in user for a comment
<strong> <%= comment.author.username %> </strong>
-----------------------------------------------------------------------------------------------Committed v8
# Users + Dazzfuns
* Prevent an unauthenticated user from creating an event
* Save username+id to newly created event
Added middleware IsLoggedIn to dazzfuns.js to ensure user not logged in can't create event
Also added author's username and ID to dazzfuns.js and used it in the show.ejs to show;
"Submitted my <user>"

-----------------------------------------------------------------------------------------------Committed v9
# Editing Dazzfuns events
npm install method-override --save
*Add Method-Override which allows me to use ?_method=DELETE" method="POST"> in my ejs's files (Also used for delete and update)
* Add Edit route for Dazzfuns
* Add Link to Edit Page
* Add Update Route
* Fix $set problem

# Deleting Events
* Add Destroy Route to routes/dazzfun.js
* Add Delete button to show.ejs

* User can only edit his/her campgrounds
* User can only delete his/her campgrounds
* Hide/Show edit and delete buttons

# Authorisation
* User can only edit his/her comments

* User can only delete his/her comments

* Hide/Show edit and delete buttons

Refactor Middleware

Note: Installing new node version; nvm ls; nvm -h; nvm alias default 10.15.3
Added a pre hook so that comments are removed from DB when event is removed https://www.udemy.com/the-web-developer-bootcamp/learn/v4/questions/6168552
Added a middleware ; if (foundComment.author.id.equals(req.user._id)) { // using mongoose built in ".equals" because using comparism operator === wasn't
working cz though they both have the same id but at the back; one is mongoose obeject and the other is a string; hence failing comparism
Moved all middlewares to a newly created middleware/index.js file and refence them from the routes for DRY coding
Also using "next" which mopves to the next code once the condition is satisfied
Added a logic in show.ejs to only show edit and delete to the currentuser and authorised creator

# Editing Comments

# 3 levels of authorizations
1. You can view all and read all comments if not logged in
2. You can create event and add comment if logged in
3. You can only update or delete event/comment if you are the creator

-----------------------------------------------------------------------------------------------Committed v10
# Error handling and displaying
Bootstrap.com/components/alert
Adding Error handling for success and error
Displaying Clear error and success messages to users taking advantage of the "err" from
mongoose while also customising mine

-----------------------------------------------------------------------------------------------Committed v11
# Added 5 images for animation fading effect on the landing page
https://github.com/nax3t/webdevbootcamp/tree/master/YelpCamp/background_slider

# Partials.css
Added bootstrap 3.3.5
Added stylesheets/landing.css for my custom stylesheet for the landing page
as I'm not using main.ss
Added moderniser to handle browser version checking compability and add classes
to handle older browser

npm install -g nodemon to prevent restarting the server everytime

Used for animation: https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function



-----------------------------------------------------------------------------------------------Committed v12
Added Datetime to show Event creation date and time
-----------------------------------------------------------------------------------------------Committed v13

Further improvement;   https://www.udemy.com/the-web-developer-bootcamp/learn/v4/t/lecture/6754188?start=0